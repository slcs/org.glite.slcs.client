
<!-- STANDALONE build for org.glite.slcs.ui -->
<!-- Valery Tschopp <tschopp@switch.ch> -->
<!-- $Id: build.standalone.xml,v 1.8 2007/07/03 15:07:59 vtschopp Exp $ -->


<project name="org.glite.slcs.client" default="tar" basedir=".">

	<property file="build.standalone.properties" />

	<!-- set global properties for this build -->
	<property name="src.dir" location="${basedir}/src" />
    <property name="external.lib.dir" location="${basedir}/../repository/externals" />
	<property name="bin.dir" location="${basedir}/scripts" />
	<property name="etc.dir" location="${basedir}/etc" />
	<property name="doc.dir" location="${basedir}/doc" />
	<property name="build.dir" location="${basedir}/build" />
	<property name="dist.dir" location="${basedir}/dist" />

    <!-- BouncyCastle JCE BC Provider library (jdk 1.4 and jdk 1.5) -->
    <property name="bouncycastle.jdk15.bcprov.jar" value="externals/share/java/bcprov-jdk15-134.jar" />
    <property name="bouncycastle.jdk14.bcprov.jar" value="externals/share/java/bcprov-jdk14-134.jar" />
    <target name="checks.bouncycastle" depends="sets.is.jdk,sets.bouncycastle.jdk14.jar,sets.bouncycastle.jdk15.jar,checks.bouncycastle.jar">
        <echo message="bouncycastle.bcprov.jar=${bouncycastle.bcprov.jar}" />
    </target>
    <target name="sets.is.jdk">
        <echo message="ant.java.version=${ant.java.version}"/>
        <condition property="is.jdk15">
            <equals arg1="${ant.java.version}" arg2="1.5" />
        </condition>
        <condition property="is.jdk14">
            <equals arg1="${ant.java.version}" arg2="1.4" />
        </condition>
    </target>
    <target name="sets.bouncycastle.jdk14.jar" if="is.jdk14">
        <property name="bouncycastle.bcprov.jar" value="${bouncycastle.jdk14.bcprov.jar}"/>
        <echo message="bouncycastle.bcprov.jar=${bouncycastle.bcprov.jar}"/>
    </target>
    <target name="sets.bouncycastle.jdk15.jar" if="is.jdk15">
        <property name="bouncycastle.bcprov.jar" value="${bouncycastle.jdk15.bcprov.jar}"/>
        <echo message="bouncycastle.bcprov.jar=${bouncycastle.bcprov.jar}"/>
    </target>
    <target name="checks.bouncycastle.jar">
        <available property="exists.bouncycastle.jar" filepath="${slcs.common.dist.dir}" file="${bouncycastle.bcprov.jar}" />
        <fail unless="exists.bouncycastle.jar">${slcs.common.dist.dir}/${bouncycastle.bcprov.jar} is not available, do a 'clean' first...</fail>
    </target>
    
    <target name="checks.slcs.common">
        <!-- condition: depends on org.glite.slcs.common package -->
        <condition property="slcs.common.is.ok">
            <and>
                <available file="${slcs.common.dist.dir}" type="dir" />
                <istrue value="${exists.bouncycastle.jar}"/>
            </and>
        </condition>
    </target>

    <target name="javacheck" depends="checks.bouncycastle,checks.slcs.common">
        <!-- check JVM version -->
        <condition property="isJavaOk">
            <equals arg1="${ant.java.version}" arg2="${slcs.required.java.version}"/>
        </condition>
        <echo>Java version: ${ant.java.version}</echo>
        <echo>SLCS required version: ${slcs.required.java.version}</echo>
        <fail unless="isJavaOk">Java JRE version must be ${slcs.required.java.version}</fail>
    </target>

   	<!-- call SLCS common 'package' task if not yet available -->
	<target name="package.slcs.common" depends="clean">
		<ant dir="${slcs.common.dir}" antfile="build.standalone.xml" target="package" inheritall="false">
            <property name="slcs.required.java.version" value="${slcs.required.java.version}"/>
        </ant>

	</target>

    <target name="init" depends="package.slcs.common,javacheck">
		<tstamp />

    	<!-- slcs common jar list (JRA1MW only) -->
        <fileset id="slcs.common.lib.jar.set" dir="${slcs.common.dist.dir}">
            <include name="share/java/*.jar" />
            <include name="externals/share/java/*.jar" />
        </fileset>

       <!-- slcs ui jar list (JRA1MW only) -->
        <fileset id="external.lib.jar.set" dir="${external.lib.dir}">
            <include name="commons-cli/1.0/noarch/commons-cli-1.0.jar"/>
            <include name="jericho-html/2.3/noarch/lib/jericho-html-2.3.jar"/>
        </fileset>

        <!-- build classpath -->
        <path id="compile.classpath">
            <!-- SLCS common lib and all common third-party libs -->
            <fileset refid="slcs.common.lib.jar.set"/>
            <!-- external third-party libs -->
            <fileset refid="external.lib.jar.set"/>
        </path>

	</target>

	<target name="prepare" depends="init">
		<mkdir dir="${build.dir}" />
	</target>

	<target name="compile" depends="prepare">
		<!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src.dir}"
               debug="true" 
               destdir="${build.dir}">
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<!-- package the SLCS-client in ${dist.dir} -->
	<target name="package" depends="compile">
		<!-- create glite directories layout -->
        <property name="glite.dist.bin.dir" location="${dist.dir}/bin" />
        <property name="glite.dist.etc.dir" location="${dist.dir}/etc/glite-slcs-ui" />
        <property name="glite.dist.doc.dir" location="${dist.dir}/share/doc/glite-slcs-ui" />
        <property name="glite.dist.log.dir" location="${dist.dir}/log" />
        <property name="glite.dist.lib.dir" location="${dist.dir}/share/java" />
        <property name="glite.dist.external.lib.dir" location="${dist.dir}/externals/share/java" />
        <mkdir dir="${glite.dist.bin.dir}" />
        <mkdir dir="${glite.dist.etc.dir}" />
        <mkdir dir="${glite.dist.doc.dir}" />
        <mkdir dir="${glite.dist.log.dir}" />
        <mkdir dir="${glite.dist.lib.dir}" />
        <mkdir dir="${glite.dist.external.lib.dir}" />
		<!-- copy bash script and set permission -->
		<copy todir="${glite.dist.bin.dir}">
			<fileset dir="${bin.dir}">
				<include name="slcs-*" />
			</fileset>
		</copy>
		<chmod dir="${glite.dist.bin.dir}" perm="755">
			<include name="slcs-*" />
		</chmod>
		<!-- copy config and etc -->
		<copy todir="${glite.dist.etc.dir}">
			<fileset dir="${etc.dir}" />
		</copy>
		<!-- copy doc -->
		<copy todir="${glite.dist.doc.dir}">
			<fileset dir="${doc.dir}" />
		</copy>
		<!-- jar SLCS ui classes -->
        <property name="slcs.ui.jar.file" location="${glite.dist.lib.dir}/${slcs.ui.jarfile}" />
        <jar destfile="${slcs.ui.jar.file}" basedir="${build.dir}" />

		<!-- copy all external third party libs (slcs ui) -->
		<copy todir="${glite.dist.external.lib.dir}" flatten="true">
			<fileset refid="external.lib.jar.set"/>
		</copy>
		<!-- copy SLCS common libs -->
		<copy todir="${dist.dir}">
			<fileset refid="slcs.common.lib.jar.set" />
		</copy>
        <!-- create an empty log file -->
        <touch file="${glite.dist.log.dir}/slcs-init.log" />
	</target>

    <!-- create a tar.gz archive -->
    <target name="tar" depends="package">
        <property name="slcs.ui.tar.file" location="glite-slcs-ui-${slcs.ui.version}-jdk${ant.java.version}-${DSTAMP}.tar.gz" />
        <tar destfile="${slcs.ui.tar.file}" compression="gzip">
            <tarfileset dir="${dist.dir}" mode="755" username="root" group="root">
                <include name="bin/slcs-*" />
            </tarfileset>
            <tarfileset dir="${dist.dir}" mode="666" username="root" group="root">
                <include name="log/slcs-init.log" />
            </tarfileset>
            <tarfileset dir="${dist.dir}" username="root" group="root">
                <exclude name="bin/slcs-*" />
                <exclude name="log/slcs-init.log" />
            </tarfileset>
        </tar>
	</target>

	<!-- delete the ${build.dir} and ${dist.dir} directory trees -->
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<ant dir="${slcs.common.dir}" antfile="build.standalone.xml" target="clean" inheritall="false"/>
	</target>
</project>
